import Foundation

// Add this extension to the 'Value' enum generated by UniFFI
extension Value {

    // 1. A convenience static method to create a .decimal case from a native Foundation.Decimal.
    public static func from(_ value: Foundation.Decimal) -> Value {
        return .decimal(value.description)
    }

    // 2. A computed property to safely extract the value.
    //    It returns an optional, as the enum case might be .null or .bool, etc.
    public var getValue: Any? {
        switch self {
            case .bool(let v):
            return v
        case .i8(let v):
            return v
        case .i16(let v):
            return v
        case .i32(let v):
            return v
        case .i64(let v):
            return v
        case .u8(let v):
            return v
        case .u16(let v):
            return v
        case .u32(let v):
            return v
        case .u64(let v):
            return v
        case .f32(let v):
            return v
        case .f64(let v):
            return v
        case .str(let v):
            return v
        case .bytea(let v):
            return v
        case .inet(let v):
            return v // IpAddr is a record, so this returns the record
        case .date(let v):
            return v
        case .timestamp(let v):
            return v
        case .time(let v):
            return v
        case .interval(let v):
            return v // Interval is a record, so this returns the record
        case .map(let v):
            return v
        case .list(let v):
            return v
        case .point(let v):
            return v // Point is a record, so this returns the record
        case .null:
            return nil
        case .u128(let v):
            return UInt128.init(v)!
        case .i128(let v):
            return Int128.init(v)!
        case .decimal(let stringValue):
            return Foundation.Decimal(string: stringValue)
        case .uuid(let stringValue):
            return UUID(uuidString: stringValue)
        default:
            return nil
        }
    }
}
