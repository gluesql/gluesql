// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.39.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import 'gluesql_core/data/schema.dart';
import 'gluesql_core/data/value.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Item>>
abstract class Item implements RustOpaqueInterface {
  BTreeMapKeyDataRow get rows;

  Schema get schema;

  void set rows(BTreeMapKeyDataRow rows);

  void set schema(Schema schema);
}

class MemoryStorage {
  final PlatformInt64 idCounter;
  final Map<String, Item> items;
  final Map<String, Map<String, Value>> metadata;
  final Map<String, StructCustomFunction> functions;

  const MemoryStorage({
    required this.idCounter,
    required this.items,
    required this.metadata,
    required this.functions,
  });

  Future<List<(Key, DataRow)>> scanData({required String tableName}) =>
      RustLib.instance.api.gluesqlMemoryStorageMemoryStorageScanData(
          that: this, tableName: tableName);

  @override
  int get hashCode =>
      idCounter.hashCode ^
      items.hashCode ^
      metadata.hashCode ^
      functions.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MemoryStorage &&
          runtimeType == other.runtimeType &&
          idCounter == other.idCounter &&
          items == other.items &&
          metadata == other.metadata &&
          functions == other.functions;
}
