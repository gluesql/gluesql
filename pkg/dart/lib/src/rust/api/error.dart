// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.39.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'ast.dart';
import 'key.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'simple.dart';
import 'value.dart';
part 'error.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `error_serialize`

enum AggregateError {
  unreachableRcUnwrapFailure,
  ;
}

@freezed
sealed class AlterError with _$AlterError {
  const AlterError._();

  const factory AlterError.tableAlreadyExists(
    String field0,
  ) = AlterError_TableAlreadyExists;
  const factory AlterError.functionAlreadyExists(
    String field0,
  ) = AlterError_FunctionAlreadyExists;
  const factory AlterError.functionNotFound(
    String field0,
  ) = AlterError_FunctionNotFound;
  const factory AlterError.tableNotFound(
    String field0,
  ) = AlterError_TableNotFound;
  const factory AlterError.ctasSourceTableNotFound(
    String field0,
  ) = AlterError_CtasSourceTableNotFound;
  const factory AlterError.unsupportedDataTypeForUniqueColumn(
    String field0,
    DataType field1,
  ) = AlterError_UnsupportedDataTypeForUniqueColumn;
  const factory AlterError.unsupportedIndexExpr(
    Expr field0,
  ) = AlterError_UnsupportedIndexExpr;
  const factory AlterError.unsupportedUnnamedArg() =
      AlterError_UnsupportedUnnamedArg;
  const factory AlterError.identifierNotFound(
    Expr field0,
  ) = AlterError_IdentifierNotFound;
  const factory AlterError.duplicateColumnName(
    String field0,
  ) = AlterError_DuplicateColumnName;
  const factory AlterError.duplicateArgName(
    String field0,
  ) = AlterError_DuplicateArgName;
  const factory AlterError.nonDefaultArgumentFollowsDefaultArgument() =
      AlterError_NonDefaultArgumentFollowsDefaultArgument;
}

@freezed
sealed class AlterTableError with _$AlterTableError {
  const AlterTableError._();

  const factory AlterTableError.tableNotFound(
    String field0,
  ) = AlterTableError_TableNotFound;
  const factory AlterTableError.renamingColumnNotFound() =
      AlterTableError_RenamingColumnNotFound;
  const factory AlterTableError.defaultValueRequired(
    ColumnDef field0,
  ) = AlterTableError_DefaultValueRequired;
  const factory AlterTableError.alreadyExistingColumn(
    String field0,
  ) = AlterTableError_AlreadyExistingColumn;
  const factory AlterTableError.droppingColumnNotFound(
    String field0,
  ) = AlterTableError_DroppingColumnNotFound;
  const factory AlterTableError.schemalessTableFound(
    String field0,
  ) = AlterTableError_SchemalessTableFound;
}

@freezed
sealed class AstBuilderError with _$AstBuilderError {
  const AstBuilderError._();

  const factory AstBuilderError.failedToParseNumeric(
    String field0,
  ) = AstBuilderError_FailedToParseNumeric;
}

class ConvertError {
  final Value value;
  final DataType dataType;

  const ConvertError({
    required this.value,
    required this.dataType,
  });

  @override
  int get hashCode => value.hashCode ^ dataType.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConvertError &&
          runtimeType == other.runtimeType &&
          value == other.value &&
          dataType == other.dataType;
}

@freezed
sealed class Error with _$Error implements FrbException {
  const Error._();

  const factory Error.storageMsg(
    String field0,
  ) = Error_StorageMsg;
  const factory Error.parser(
    String field0,
  ) = Error_Parser;
  const factory Error.translate(
    TranslateError field0,
  ) = Error_Translate;
  const factory Error.astBuilder(
    AstBuilderError field0,
  ) = Error_AstBuilder;
  const factory Error.alterTable(
    AlterTableError field0,
  ) = Error_AlterTable;
  const factory Error.index(
    IndexError field0,
  ) = Error_Index;
  const factory Error.execute(
    ExecuteError field0,
  ) = Error_Execute;
  const factory Error.alter(
    AlterError field0,
  ) = Error_Alter;
  const factory Error.fetch(
    FetchError field0,
  ) = Error_Fetch;
  const factory Error.select(
    SelectError field0,
  ) = Error_Select;
  const factory Error.evaluate(
    EvaluateError field0,
  ) = Error_Evaluate;
  const factory Error.aggregate(
    AggregateError field0,
  ) = Error_Aggregate;
  const factory Error.sort(
    SortError field0,
  ) = Error_Sort;
  const factory Error.insert(
    InsertError field0,
  ) = Error_Insert;
  const factory Error.update(
    UpdateError field0,
  ) = Error_Update;
  const factory Error.table(
    TableError field0,
  ) = Error_Table;
  const factory Error.validate(
    ValidateError field0,
  ) = Error_Validate;
  const factory Error.row(
    RowError field0,
  ) = Error_Row;
  const factory Error.key(
    KeyError field0,
  ) = Error_Key;
  const factory Error.value(
    ValueError field0,
  ) = Error_Value;
  const factory Error.convert(
    ConvertError field0,
  ) = Error_Convert;
  const factory Error.literal(
    LiteralError field0,
  ) = Error_Literal;
  const factory Error.interval(
    IntervalError field0,
  ) = Error_Interval;
  const factory Error.stringExt(
    StringExtError field0,
  ) = Error_StringExt;
  const factory Error.plan(
    PlanError field0,
  ) = Error_Plan;
  const factory Error.schema(
    SchemaParseError field0,
  ) = Error_Schema;
}

@freezed
sealed class EvaluateError with _$EvaluateError {
  const EvaluateError._();

  const factory EvaluateError.formatParseError(
    ParseError field0,
  ) = EvaluateError_FormatParseError;
  const factory EvaluateError.literalAddOnNonNumeric() =
      EvaluateError_LiteralAddOnNonNumeric;
  const factory EvaluateError.functionRequiresStringValue(
    String field0,
  ) = EvaluateError_FunctionRequiresStringValue;
  const factory EvaluateError.functionRequiresIntegerValue(
    String field0,
  ) = EvaluateError_FunctionRequiresIntegerValue;
  const factory EvaluateError.functionRequiresFloatOrIntegerValue(
    String field0,
  ) = EvaluateError_FunctionRequiresFloatOrIntegerValue;
  const factory EvaluateError.functionRequiresUSizeValue(
    String field0,
  ) = EvaluateError_FunctionRequiresUSizeValue;
  const factory EvaluateError.functionRequiresFloatValue(
    String field0,
  ) = EvaluateError_FunctionRequiresFloatValue;
  const factory EvaluateError.extractFormatNotMatched(
    String field0,
  ) = EvaluateError_ExtractFormatNotMatched;
  const factory EvaluateError.functionRequiresMapValue(
    String field0,
  ) = EvaluateError_FunctionRequiresMapValue;
  const factory EvaluateError.functionRequiresPointValue(
    String field0,
  ) = EvaluateError_FunctionRequiresPointValue;
  const factory EvaluateError.functionRequiresDateOrDateTimeValue(
    String field0,
  ) = EvaluateError_FunctionRequiresDateOrDateTimeValue;
  const factory EvaluateError.functionRequiresStrOrListOrMapValue(
    String field0,
  ) = EvaluateError_FunctionRequiresStrOrListOrMapValue;
  const factory EvaluateError.valueNotFound(
    String field0,
  ) = EvaluateError_ValueNotFound;
  const factory EvaluateError.booleanTypeRequired(
    String field0,
  ) = EvaluateError_BooleanTypeRequired;
  const factory EvaluateError.mapOrListTypeRequired() =
      EvaluateError_MapOrListTypeRequired;
  const factory EvaluateError.mapTypeRequired() = EvaluateError_MapTypeRequired;
  const factory EvaluateError.listTypeRequired() =
      EvaluateError_ListTypeRequired;
  const factory EvaluateError.invalidSortType() = EvaluateError_InvalidSortType;
  const factory EvaluateError.invalidSortOrder() =
      EvaluateError_InvalidSortOrder;
  const factory EvaluateError.mapOrStringValueRequired(
    String field0,
  ) = EvaluateError_MapOrStringValueRequired;
  const factory EvaluateError.textLiteralRequired(
    String field0,
  ) = EvaluateError_TextLiteralRequired;
  const factory EvaluateError.unsupportedStatelessExpr(
    Expr field0,
  ) = EvaluateError_UnsupportedStatelessExpr;
  const factory EvaluateError.contextRequiredForIdentEvaluation(
    Expr field0,
  ) = EvaluateError_ContextRequiredForIdentEvaluation;
  const factory EvaluateError.unreachableEmptyAggregateValue(
    Aggregate field0,
  ) = EvaluateError_UnreachableEmptyAggregateValue;
  const factory EvaluateError.incompatibleBitOperation(
    String field0,
    String field1,
  ) = EvaluateError_IncompatibleBitOperation;
  const factory EvaluateError.divisorShouldNotBeZero() =
      EvaluateError_DivisorShouldNotBeZero;
  const factory EvaluateError.negativeSubstrLenNotAllowed() =
      EvaluateError_NegativeSubstrLenNotAllowed;
  const factory EvaluateError.moreThanOneRowReturned() =
      EvaluateError_MoreThanOneRowReturned;
  const factory EvaluateError.moreThanOneColumnReturned() =
      EvaluateError_MoreThanOneColumnReturned;
  const factory EvaluateError.schemalessProjectionForInSubQuery() =
      EvaluateError_SchemalessProjectionForInSubQuery;
  const factory EvaluateError.schemalessProjectionForSubQuery() =
      EvaluateError_SchemalessProjectionForSubQuery;
  const factory EvaluateError.unsupportedExprForFormatFunction(
    String field0,
  ) = EvaluateError_UnsupportedExprForFormatFunction;
  const factory EvaluateError.asciiFunctionRequiresSingleCharacterValue() =
      EvaluateError_AsciiFunctionRequiresSingleCharacterValue;
  const factory EvaluateError.nonAsciiCharacterNotAllowed() =
      EvaluateError_NonAsciiCharacterNotAllowed;
  const factory EvaluateError.chrFunctionRequiresIntegerValueInRange0To255() =
      EvaluateError_ChrFunctionRequiresIntegerValueInRange0To255;
  const factory EvaluateError.unsupportedBinaryOperation({
    required String left,
    required BinaryOperator op,
    required String right,
  }) = EvaluateError_UnsupportedBinaryOperation;
  const factory EvaluateError.unsupportedUnaryPlus(
    String field0,
  ) = EvaluateError_UnsupportedUnaryPlus;
  const factory EvaluateError.unsupportedUnaryMinus(
    String field0,
  ) = EvaluateError_UnsupportedUnaryMinus;
  const factory EvaluateError.unsupportedUnaryFactorial(
    String field0,
  ) = EvaluateError_UnsupportedUnaryFactorial;
  const factory EvaluateError.incompatibleUnaryBitwiseNotOperation(
    String field0,
  ) = EvaluateError_IncompatibleUnaryBitwiseNotOperation;
  const factory EvaluateError.unsupportedCustomFunction() =
      EvaluateError_UnsupportedCustomFunction;
  const factory EvaluateError.functionRequiresMoreArguments({
    required String functionName,
    required BigInt requiredMinimum,
    required BigInt found,
  }) = EvaluateError_FunctionRequiresMoreArguments;
  const factory EvaluateError.functionArgsLengthNotWithinRange({
    required String name,
    required BigInt expectedMinimum,
    required BigInt expectedMaximum,
    required BigInt found,
  }) = EvaluateError_FunctionArgsLengthNotWithinRange;
  const factory EvaluateError.unsupportedFunction(
    String field0,
  ) = EvaluateError_UnsupportedFunction;
  const factory EvaluateError.nonComparableArgumentError(
    String field0,
  ) = EvaluateError_NonComparableArgumentError;
  const factory EvaluateError.functionRequiresAtLeastOneArgument(
    String field0,
  ) = EvaluateError_FunctionRequiresAtLeastOneArgument;
}

@freezed
sealed class ExecuteError with _$ExecuteError {
  const ExecuteError._();

  const factory ExecuteError.tableNotFound(
    String field0,
  ) = ExecuteError_TableNotFound;
}

@freezed
sealed class FetchError with _$FetchError {
  const FetchError._();

  const factory FetchError.tableNotFound(
    String field0,
  ) = FetchError_TableNotFound;
  const factory FetchError.tableAliasNotFound(
    String field0,
  ) = FetchError_TableAliasNotFound;
  const factory FetchError.seriesSizeWrong(
    PlatformInt64 field0,
  ) = FetchError_SeriesSizeWrong;
  const factory FetchError.tooManyColumnAliases(
    String field0,
    BigInt field1,
    BigInt field2,
  ) = FetchError_TooManyColumnAliases;
}

@freezed
sealed class IndexError with _$IndexError {
  const IndexError._();

  const factory IndexError.tableNotFound(
    String field0,
  ) = IndexError_TableNotFound;
  const factory IndexError.indexNameAlreadyExists(
    String field0,
  ) = IndexError_IndexNameAlreadyExists;
  const factory IndexError.indexNameDoesNotExist(
    String field0,
  ) = IndexError_IndexNameDoesNotExist;
  const factory IndexError.conflictTableNotFound(
    String field0,
  ) = IndexError_ConflictTableNotFound;
  const factory IndexError.conflictOnEmptyIndexValueUpdate() =
      IndexError_ConflictOnEmptyIndexValueUpdate;
  const factory IndexError.conflictOnEmptyIndexValueDelete() =
      IndexError_ConflictOnEmptyIndexValueDelete;
  const factory IndexError.conflictOnEmptyIndexValueScan() =
      IndexError_ConflictOnEmptyIndexValueScan;
  const factory IndexError.conflictOnIndexDataDeleteSync() =
      IndexError_ConflictOnIndexDataDeleteSync;
}

@freezed
sealed class InsertError with _$InsertError {
  const InsertError._();

  const factory InsertError.tableNotFound(
    String field0,
  ) = InsertError_TableNotFound;
  const factory InsertError.lackOfRequiredColumn(
    String field0,
  ) = InsertError_LackOfRequiredColumn;
  const factory InsertError.wrongColumnName(
    String field0,
  ) = InsertError_WrongColumnName;
  const factory InsertError.columnAndValuesNotMatched() =
      InsertError_ColumnAndValuesNotMatched;
  const factory InsertError.tooManyValues() = InsertError_TooManyValues;
  const factory InsertError.onlySingleValueAcceptedForSchemalessRow() =
      InsertError_OnlySingleValueAcceptedForSchemalessRow;
  const factory InsertError.mapTypeValueRequired(
    String field0,
  ) = InsertError_MapTypeValueRequired;
}

@freezed
sealed class IntervalError with _$IntervalError {
  const IntervalError._();

  const factory IntervalError.unsupportedRange(
    String field0,
    String field1,
  ) = IntervalError_UnsupportedRange;
  const factory IntervalError.addBetweenYearToMonthAndHourToSecond() =
      IntervalError_AddBetweenYearToMonthAndHourToSecond;
  const factory IntervalError.subtractBetweenYearToMonthAndHourToSecond() =
      IntervalError_SubtractBetweenYearToMonthAndHourToSecond;
  const factory IntervalError.addYearOrMonthToTime({
    required NaiveTime time,
    required Interval interval,
  }) = IntervalError_AddYearOrMonthToTime;
  const factory IntervalError.subtractYearOrMonthToTime({
    required NaiveTime time,
    required Interval interval,
  }) = IntervalError_SubtractYearOrMonthToTime;
  const factory IntervalError.failedToParseInteger(
    String field0,
  ) = IntervalError_FailedToParseInteger;
  const factory IntervalError.failedToParseDecimal(
    String field0,
  ) = IntervalError_FailedToParseDecimal;
  const factory IntervalError.failedToParseTime(
    String field0,
  ) = IntervalError_FailedToParseTime;
  const factory IntervalError.failedToParseYearToMonth(
    String field0,
  ) = IntervalError_FailedToParseYearToMonth;
  const factory IntervalError.failedToParseDayToHour(
    String field0,
  ) = IntervalError_FailedToParseDayToHour;
  const factory IntervalError.failedToParseDayToMinute(
    String field0,
  ) = IntervalError_FailedToParseDayToMinute;
  const factory IntervalError.failedToParseDayToSecond(
    String field0,
  ) = IntervalError_FailedToParseDayToSecond;
  const factory IntervalError.dateOverflow({
    required int year,
    required int month,
  }) = IntervalError_DateOverflow;
  const factory IntervalError.failedToExtract() = IntervalError_FailedToExtract;
  const factory IntervalError.parseSupportedOnlyLiteral({
    required Expr expr,
  }) = IntervalError_ParseSupportedOnlyLiteral;
  const factory IntervalError.unreachable() = IntervalError_Unreachable;
}

enum KeyError {
  floatToCmpBigEndianNotSupported,
  mapTypeKeyNotSupported,
  listTypeKeyNotSupported,
  pointTypeKeyNotSupported,
  ;
}

@freezed
sealed class LiteralError with _$LiteralError {
  const LiteralError._();

  const factory LiteralError.unsupportedBinaryOperation({
    required String left,
    required BinaryOperator op,
    required String right,
  }) = LiteralError_UnsupportedBinaryOperation;
  const factory LiteralError.bitwiseNonIntegerOperand(
    String field0,
  ) = LiteralError_BitwiseNonIntegerOperand;
  const factory LiteralError.bitwiseNonNumberLiteral() =
      LiteralError_BitwiseNonNumberLiteral;
  const factory LiteralError.bitwiseOperationOverflow() =
      LiteralError_BitwiseOperationOverflow;
  const factory LiteralError.impossibleConversion(
    String field0,
    String field1,
  ) = LiteralError_ImpossibleConversion;
  const factory LiteralError.divisorShouldNotBeZero() =
      LiteralError_DivisorShouldNotBeZero;
  const factory LiteralError.unaryOperationOnNonNumeric() =
      LiteralError_UnaryOperationOnNonNumeric;
  const factory LiteralError.unreachableBinaryArithmetic() =
      LiteralError_UnreachableBinaryArithmetic;
  const factory LiteralError.unreachableUnaryOperation() =
      LiteralError_UnreachableUnaryOperation;
  const factory LiteralError.failedToDecodeHexString(
    String field0,
  ) = LiteralError_FailedToDecodeHexString;
  const factory LiteralError.likeOnNonString({
    required String base,
    required String pattern,
    required bool caseSensitive,
  }) = LiteralError_LikeOnNonString;
}

enum NumericBinaryOperator {
  add,
  subtract,
  multiply,
  divide,
  modulo,
  bitwiseAnd,
  bitwiseShiftLeft,
  bitwiseShiftRight,
  ;
}

@freezed
sealed class PlanError with _$PlanError {
  const PlanError._();

  /// Error that that omits when user projects common column name from multiple tables in `JOIN`
  /// situation.
  const factory PlanError.columnReferenceAmbiguous(
    String field0,
  ) = PlanError_ColumnReferenceAmbiguous;
}

enum RowError {
  conflictOnUnexpectedMapRowFound,
  conflictOnUnexpectedVecRowFound,
  ;
}

enum SchemaParseError {
  cannotParseDdl,
  ;
}

enum SelectError {
  numberOfValuesDifferent,
  ;
}

@freezed
sealed class SortError with _$SortError {
  const SortError._();

  const factory SortError.columnIndexOutOfRange(
    BigInt field0,
  ) = SortError_ColumnIndexOutOfRange;
  const factory SortError.unreachable() = SortError_Unreachable;
}

enum StringExtError {
  unreachablePatternParsing,
  ;
}

enum TableError {
  unreachable,
  ;
}

@freezed
sealed class TranslateError with _$TranslateError {
  const TranslateError._();

  const factory TranslateError.tooManyTables() = TranslateError_TooManyTables;
  const factory TranslateError.selectDistinctNotSupported() =
      TranslateError_SelectDistinctNotSupported;
  const factory TranslateError.compositeIndexNotSupported() =
      TranslateError_CompositeIndexNotSupported;
  const factory TranslateError.joinOnUpdateNotSupported() =
      TranslateError_JoinOnUpdateNotSupported;
  const factory TranslateError.compoundIdentOnUpdateNotSupported(
    String field0,
  ) = TranslateError_CompoundIdentOnUpdateNotSupported;
  const factory TranslateError.tooManyParamsInDropIndex() =
      TranslateError_TooManyParamsInDropIndex;
  const factory TranslateError.invalidParamsInDropIndex() =
      TranslateError_InvalidParamsInDropIndex;
  const factory TranslateError.functionArgsLengthNotMatching({
    required String name,
    required BigInt expected,
    required BigInt found,
  }) = TranslateError_FunctionArgsLengthNotMatching;
  const factory TranslateError.functionArgsLengthNotMatchingMin({
    required String name,
    required BigInt expectedMinimum,
    required BigInt found,
  }) = TranslateError_FunctionArgsLengthNotMatchingMin;
  const factory TranslateError.functionArgsLengthNotWithinRange({
    required String name,
    required BigInt expectedMinimum,
    required BigInt expectedMaximum,
    required BigInt found,
  }) = TranslateError_FunctionArgsLengthNotWithinRange;
  const factory TranslateError.namedFunctionArgNotSupported() =
      TranslateError_NamedFunctionArgNotSupported;
  const factory TranslateError.unNamedFunctionArgNotSupported() =
      TranslateError_UnNamedFunctionArgNotSupported;
  const factory TranslateError.defaultValuesOnInsertNotSupported(
    String field0,
  ) = TranslateError_DefaultValuesOnInsertNotSupported;
  const factory TranslateError.unsupportedEmptyFunctionBody() =
      TranslateError_UnsupportedEmptyFunctionBody;
  const factory TranslateError.unsupportedUnnamedIndex() =
      TranslateError_UnsupportedUnnamedIndex;
  const factory TranslateError.unsupportedTrimChars() =
      TranslateError_UnsupportedTrimChars;
  const factory TranslateError.unsupportedCastFormat(
    String field0,
  ) = TranslateError_UnsupportedCastFormat;
  const factory TranslateError.unsupportedMultipleAlterTableOperations() =
      TranslateError_UnsupportedMultipleAlterTableOperations;
  const factory TranslateError.unreachableEmptyAlterTableOperation() =
      TranslateError_UnreachableEmptyAlterTableOperation;
  const factory TranslateError.unsupportedGroupByAll() =
      TranslateError_UnsupportedGroupByAll;
  const factory TranslateError.wildcardFunctionArgNotAccepted() =
      TranslateError_WildcardFunctionArgNotAccepted;
  const factory TranslateError.qualifiedWildcardInCountNotSupported(
    String field0,
  ) = TranslateError_QualifiedWildcardInCountNotSupported;
  const factory TranslateError.orderByNullsFirstOrLastNotSupported() =
      TranslateError_OrderByNullsFirstOrLastNotSupported;
  const factory TranslateError.unsupportedShowVariableKeyword(
    String field0,
  ) = TranslateError_UnsupportedShowVariableKeyword;
  const factory TranslateError.unsupportedShowVariableStatement(
    String field0,
  ) = TranslateError_UnsupportedShowVariableStatement;
  const factory TranslateError.unsupportedStatement(
    String field0,
  ) = TranslateError_UnsupportedStatement;
  const factory TranslateError.unsupportedExpr(
    String field0,
  ) = TranslateError_UnsupportedExpr;
  const factory TranslateError.unsupportedDataType(
    String field0,
  ) = TranslateError_UnsupportedDataType;
  const factory TranslateError.unsupportedDateTimeField(
    String field0,
  ) = TranslateError_UnsupportedDateTimeField;
  const factory TranslateError.unsupportedAstLiteral(
    String field0,
  ) = TranslateError_UnsupportedAstLiteral;
  const factory TranslateError.unreachableUnaryOperator(
    String field0,
  ) = TranslateError_UnreachableUnaryOperator;
  const factory TranslateError.unreachableEmptyIdent() =
      TranslateError_UnreachableEmptyIdent;
  const factory TranslateError.unsupportedBinaryOperator(
    String field0,
  ) = TranslateError_UnsupportedBinaryOperator;
  const factory TranslateError.unsupportedQuerySetExpr(
    String field0,
  ) = TranslateError_UnsupportedQuerySetExpr;
  const factory TranslateError.unsupportedQueryTableFactor(
    String field0,
  ) = TranslateError_UnsupportedQueryTableFactor;
  const factory TranslateError.unsupportedJoinConstraint(
    String field0,
  ) = TranslateError_UnsupportedJoinConstraint;
  const factory TranslateError.unsupportedJoinOperator(
    String field0,
  ) = TranslateError_UnsupportedJoinOperator;
  const factory TranslateError.unsupportedColumnOption(
    String field0,
  ) = TranslateError_UnsupportedColumnOption;
  const factory TranslateError.unsupportedAlterTableOperation(
    String field0,
  ) = TranslateError_UnsupportedAlterTableOperation;
  const factory TranslateError.unsupportedTableFactor(
    String field0,
  ) = TranslateError_UnsupportedTableFactor;
  const factory TranslateError.lackOfAlias() = TranslateError_LackOfAlias;
  const factory TranslateError.lackOfArgs() = TranslateError_LackOfArgs;
  const factory TranslateError.unreachableEmptyObject() =
      TranslateError_UnreachableEmptyObject;
  const factory TranslateError.unreachableEmptyTable() =
      TranslateError_UnreachableEmptyTable;
  const factory TranslateError.compoundObjectNotSupported(
    String field0,
  ) = TranslateError_CompoundObjectNotSupported;
  const factory TranslateError.reservedIndexName(
    String field0,
  ) = TranslateError_ReservedIndexName;
  const factory TranslateError.cannotDropPrimary() =
      TranslateError_CannotDropPrimary;
}

@freezed
sealed class UpdateError with _$UpdateError {
  const UpdateError._();

  const factory UpdateError.columnNotFound(
    String field0,
  ) = UpdateError_ColumnNotFound;
  const factory UpdateError.updateOnPrimaryKeyNotSupported(
    String field0,
  ) = UpdateError_UpdateOnPrimaryKeyNotSupported;
  const factory UpdateError.conflictOnSchema() = UpdateError_ConflictOnSchema;
}

@freezed
sealed class ValidateError with _$ValidateError {
  const ValidateError._();

  const factory ValidateError.conflictOnStorageColumnIndex(
    BigInt field0,
  ) = ValidateError_ConflictOnStorageColumnIndex;
  const factory ValidateError.conflictOnUnexpectedSchemalessRowFound() =
      ValidateError_ConflictOnUnexpectedSchemalessRowFound;
  const factory ValidateError.duplicateEntryOnUniqueField(
    Value field0,
    String field1,
  ) = ValidateError_DuplicateEntryOnUniqueField;
  const factory ValidateError.duplicateEntryOnPrimaryKeyField(
    Key field0,
  ) = ValidateError_DuplicateEntryOnPrimaryKeyField;
}

@freezed
sealed class ValueError with _$ValueError {
  const ValueError._();

  const factory ValueError.incompatibleLiteralForDataType({
    required DataType dataType,
    required String literal,
  }) = ValueError_IncompatibleLiteralForDataType;
  const factory ValueError.incompatibleDataType({
    required DataType dataType,
    required Value value,
  }) = ValueError_IncompatibleDataType;
  const factory ValueError.nullValueOnNotNullField() =
      ValueError_NullValueOnNotNullField;
  const factory ValueError.failedToParseNumber() =
      ValueError_FailedToParseNumber;
  const factory ValueError.floatToDecimalConversionFailure(
    double field0,
  ) = ValueError_FloatToDecimalConversionFailure;
  const factory ValueError.failedToParseDate(
    String field0,
  ) = ValueError_FailedToParseDate;
  const factory ValueError.failedToParseTimestamp(
    String field0,
  ) = ValueError_FailedToParseTimestamp;
  const factory ValueError.failedToParseTime(
    String field0,
  ) = ValueError_FailedToParseTime;
  const factory ValueError.failedToParseUuid(
    String field0,
  ) = ValueError_FailedToParseUUID;
  const factory ValueError.failedToParsePoint(
    String field0,
  ) = ValueError_FailedToParsePoint;
  const factory ValueError.failedToParseDecimal(
    String field0,
  ) = ValueError_FailedToParseDecimal;
  const factory ValueError.failedToParseHexString(
    String field0,
  ) = ValueError_FailedToParseHexString;
  const factory ValueError.failedToParseInetString(
    String field0,
  ) = ValueError_FailedToParseInetString;
  const factory ValueError.nonNumericMathOperation({
    required Value lhs,
    required Value rhs,
    required NumericBinaryOperator operator_,
  }) = ValueError_NonNumericMathOperation;
  const factory ValueError.divisorShouldNotBeZero() =
      ValueError_DivisorShouldNotBeZero;
  const factory ValueError.unaryPlusOnNonNumeric() =
      ValueError_UnaryPlusOnNonNumeric;
  const factory ValueError.unaryMinusOnNonNumeric() =
      ValueError_UnaryMinusOnNonNumeric;
  const factory ValueError.factorialOnNonNumeric() =
      ValueError_FactorialOnNonNumeric;
  const factory ValueError.factorialOnNonInteger() =
      ValueError_FactorialOnNonInteger;
  const factory ValueError.factorialOnNegativeNumeric() =
      ValueError_FactorialOnNegativeNumeric;
  const factory ValueError.factorialOverflow() = ValueError_FactorialOverflow;
  const factory ValueError.gcdLcmOverflow(
    PlatformInt64 field0,
  ) = ValueError_GcdLcmOverflow;
  const factory ValueError.lcmResultOutOfRange() =
      ValueError_LcmResultOutOfRange;
  const factory ValueError.unaryBitwiseNotOnNonNumeric() =
      ValueError_UnaryBitwiseNotOnNonNumeric;
  const factory ValueError.unaryBitwiseNotOnNonInteger() =
      ValueError_UnaryBitwiseNotOnNonInteger;
  const factory ValueError.unreachableNumberParsing() =
      ValueError_UnreachableNumberParsing;
  const factory ValueError.unimplementedCast({
    required Value value,
    required DataType dataType,
  }) = ValueError_UnimplementedCast;
  const factory ValueError.castFromHexToByteaFailed(
    String field0,
  ) = ValueError_CastFromHexToByteaFailed;
  const factory ValueError.emptyArgNotAllowedInConcat() =
      ValueError_EmptyArgNotAllowedInConcat;
  const factory ValueError.literalCastFromTextToIntegerFailed(
    String field0,
  ) = ValueError_LiteralCastFromTextToIntegerFailed;
  const factory ValueError.literalCastFromTextToUnsignedInt8Failed(
    String field0,
  ) = ValueError_LiteralCastFromTextToUnsignedInt8Failed;
  const factory ValueError.literalCastFromTextToUint16Failed(
    String field0,
  ) = ValueError_LiteralCastFromTextToUint16Failed;
  const factory ValueError.literalCastFromTextToUint32Failed(
    String field0,
  ) = ValueError_LiteralCastFromTextToUint32Failed;
  const factory ValueError.literalCastFromTextToUint64Failed(
    String field0,
  ) = ValueError_LiteralCastFromTextToUint64Failed;
  const factory ValueError.literalCastFromTextToUint128Failed(
    String field0,
  ) = ValueError_LiteralCastFromTextToUint128Failed;
  const factory ValueError.literalCastFromTextToFloatFailed(
    String field0,
  ) = ValueError_LiteralCastFromTextToFloatFailed;
  const factory ValueError.literalCastFromTextToDecimalFailed(
    String field0,
  ) = ValueError_LiteralCastFromTextToDecimalFailed;
  const factory ValueError.literalCastToBooleanFailed(
    String field0,
  ) = ValueError_LiteralCastToBooleanFailed;
  const factory ValueError.literalCastToDateFailed(
    String field0,
  ) = ValueError_LiteralCastToDateFailed;
  const factory ValueError.literalCastToDataTypeFailed(
    DataType field0,
    String field1,
  ) = ValueError_LiteralCastToDataTypeFailed;
  const factory ValueError.literalCastToInt8Failed(
    String field0,
  ) = ValueError_LiteralCastToInt8Failed;
  const factory ValueError.literalCastToUnsignedInt8Failed(
    String field0,
  ) = ValueError_LiteralCastToUnsignedInt8Failed;
  const factory ValueError.literalCastToUint16Failed(
    String field0,
  ) = ValueError_LiteralCastToUint16Failed;
  const factory ValueError.literalCastToUint32Failed(
    String field0,
  ) = ValueError_LiteralCastToUint32Failed;
  const factory ValueError.literalCastToUint64Failed(
    String field0,
  ) = ValueError_LiteralCastToUint64Failed;
  const factory ValueError.literalCastToUint128Failed(
    String field0,
  ) = ValueError_LiteralCastToUint128Failed;
  const factory ValueError.literalCastToTimeFailed(
    String field0,
  ) = ValueError_LiteralCastToTimeFailed;
  const factory ValueError.literalCastToTimestampFailed(
    String field0,
  ) = ValueError_LiteralCastToTimestampFailed;
  const factory ValueError.unreachableLiteralCastFromNumberToInteger(
    String field0,
  ) = ValueError_UnreachableLiteralCastFromNumberToInteger;
  const factory ValueError.unreachableLiteralCastFromNumberToFloat(
    String field0,
  ) = ValueError_UnreachableLiteralCastFromNumberToFloat;
  const factory ValueError.unimplementedLiteralCast({
    required DataType dataType,
    required String literal,
  }) = ValueError_UnimplementedLiteralCast;
  const factory ValueError.unreachableIntegerOverflow(
    String field0,
  ) = ValueError_UnreachableIntegerOverflow;
  const factory ValueError.likeOnNonString({
    required Value base,
    required Value pattern,
    required bool caseSensitive,
  }) = ValueError_LikeOnNonString;
  const factory ValueError.extractFormatNotMatched({
    required Value value,
    required DateTimeField field,
  }) = ValueError_ExtractFormatNotMatched;
  const factory ValueError.bigEndianExportNotSupported(
    String field0,
  ) = ValueError_BigEndianExportNotSupported;
  const factory ValueError.invalidJsonString(
    String field0,
  ) = ValueError_InvalidJsonString;
  const factory ValueError.jsonObjectTypeRequired() =
      ValueError_JsonObjectTypeRequired;
  const factory ValueError.jsonArrayTypeRequired() =
      ValueError_JsonArrayTypeRequired;
  const factory ValueError.unreachableJsonNumberParseFailure(
    String field0,
  ) = ValueError_UnreachableJsonNumberParseFailure;
  const factory ValueError.selectorRequiresMapOrListTypes() =
      ValueError_SelectorRequiresMapOrListTypes;
  const factory ValueError.binaryOperationOverflow({
    required Value lhs,
    required Value rhs,
    required NumericBinaryOperator operator_,
  }) = ValueError_BinaryOperationOverflow;
  const factory ValueError.sqrtOnNonNumeric(
    Value field0,
  ) = ValueError_SqrtOnNonNumeric;
  const factory ValueError.nonStringParameterInPosition({
    required Value from,
    required Value sub,
  }) = ValueError_NonStringParameterInPosition;
  const factory ValueError.nonStringParameterInFindIdx({
    required Value sub,
    required Value from,
  }) = ValueError_NonStringParameterInFindIdx;
  const factory ValueError.nonPositiveIntegerOffsetInFindIdx(
    String field0,
  ) = ValueError_NonPositiveIntegerOffsetInFindIdx;
  const factory ValueError.valueToExprConversionFailure() =
      ValueError_ValueToExprConversionFailure;
  const factory ValueError.i64ToU32ConversionFailure(
    String field0,
  ) = ValueError_I64ToU32ConversionFailure;
}
